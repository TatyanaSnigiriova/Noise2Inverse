<IPython.core.display.HTML object>
------------------------------------------------------------------------------------------------
sample_dir_path:	 sand_1p1x_31MP_034
sample_dir_path:	 /home/t_kolesnik/noise2inverse_temp/split_16/sand_1p1x_31MP_034
projections_dirs: ['projections_noisy']
clean_projections_dir: []
Не найдено директории для чистых от шума проекций. Обработка только шумных проекций.
noisy_projections_dir: ['projections_noisy']
Training on GPU...

		device = gpu
		global_rs=42
		rec_library=noise2inverse
		rec_method=fbp
		main_data_path=/home/t_kolesnik/noise2inverse_temp/split_16/sand_1p1x_31MP_034/data
		clean_projections_dir=None
		noisy_projections_dir=projections_noisy
		main_logs_path=/home/t_kolesnik/noise2inverse_temp/split_16/sand_1p1x_31MP_034/logs
		center=300
		rec_width=-1
		modes_correction_list=['circ_mask']
		splits=16
		normalize_rec=1
		hist_percent=99
		circ_mask_ratio=0.9
		output_recs_prefix=output
		log_rec_idx=50

sino_noisy: (224, 720, 592) <class 'numpy.ndarray'> float32
postprocessing_args: {'circ_mask': [('ratio', 0.9), ('axis', 0)]}
postprocessing_args: {'circ_mask': [('ratio', 0.9), ('axis', 0)]}
postprocessing_list ['circ_mask']

angles: 720 [0.         0.00436332 0.00872665 0.01308997 0.01745329 0.02181662
 0.02617994 0.03054326 0.03490659 0.03926991 0.04363323 0.04799655
 0.05235988 0.0567232  0.06108652 0.06544985 0.06981317 0.07417649
 0.07853982 0.08290314 0.08726646 0.09162979 0.09599311 0.10035643
 0.10471976 0.10908308 0.1134464  0.11780972 0.12217305 0.12653637
 0.13089969 0.13526302 0.13962634 0.14398966 0.14835299 0.15271631
 0.15707963 0.16144296 0.16580628 0.1701696  0.17453293 0.17889625
 0.18325957 0.18762289 0.19198622 0.19634954 0.20071286 0.20507619
 0.20943951 0.21380283 0.21816616 0.22252948 0.2268928  0.23125613
 0.23561945 0.23998277 0.2443461  0.24870942 0.25307274 0.25743606
 0.26179939 0.26616271 0.27052603 0.27488936 0.27925268 0.283616
 0.28797933 0.29234265 0.29670597 0.3010693  0.30543262 0.30979594
 0.31415927 0.31852259 0.32288591 0.32724923 0.33161256 0.33597588
 0.3403392  0.34470253 0.34906585 0.35342917 0.3577925  0.36215582
 0.36651914 0.37088247 0.37524579 0.37960911 0.38397244 0.38833576
 0.39269908 0.3970624  0.40142573 0.40578905 0.41015237 0.4145157
 0.41887902 0.42324234 0.42760567 0.43196899 0.43633231 0.44069564
 0.44505896 0.44942228 0.45378561 0.45814893 0.46251225 0.46687557
 0.4712389  0.47560222 0.47996554 0.48432887 0.48869219 0.49305551
 0.49741884 0.50178216 0.50614548 0.51050881 0.51487213 0.51923545
 0.52359878 0.5279621  0.53232542 0.53668874 0.54105207 0.54541539
 0.54977871 0.55414204 0.55850536 0.56286868 0.56723201 0.57159533
 0.57595865 0.58032198 0.5846853  0.58904862 0.59341195 0.59777527
 0.60213859 0.60650192 0.61086524 0.61522856 0.61959188 0.62395521
 0.62831853 0.63268185 0.63704518 0.6414085  0.64577182 0.65013515
 0.65449847 0.65886179 0.66322512 0.66758844 0.67195176 0.67631509
 0.68067841 0.68504173 0.68940505 0.69376838 0.6981317  0.70249502
 0.70685835 0.71122167 0.71558499 0.71994832 0.72431164 0.72867496
 0.73303829 0.73740161 0.74176493 0.74612826 0.75049158 0.7548549
 0.75921822 0.76358155 0.76794487 0.77230819 0.77667152 0.78103484
 0.78539816 0.78976149 0.79412481 0.79848813 0.80285146 0.80721478
 0.8115781  0.81594143 0.82030475 0.82466807 0.82903139 0.83339472
 0.83775804 0.84212136 0.84648469 0.85084801 0.85521133 0.85957466
 0.86393798 0.8683013  0.87266463 0.87702795 0.88139127 0.8857546
 0.89011792 0.89448124 0.89884456 0.90320789 0.90757121 0.91193453
 0.91629786 0.92066118 0.9250245  0.92938783 0.93375115 0.93811447
 0.9424778  0.94684112 0.95120444 0.95556777 0.95993109 0.96429441
 0.96865773 0.97302106 0.97738438 0.9817477  0.98611103 0.99047435
 0.99483767 0.999201   1.00356432 1.00792764 1.01229097 1.01665429
 1.02101761 1.02538094 1.02974426 1.03410758 1.0384709  1.04283423
 1.04719755 1.05156087 1.0559242  1.06028752 1.06465084 1.06901417
 1.07337749 1.07774081 1.08210414 1.08646746 1.09083078 1.09519411
 1.09955743 1.10392075 1.10828408 1.1126474  1.11701072 1.12137404
 1.12573737 1.13010069 1.13446401 1.13882734 1.14319066 1.14755398
 1.15191731 1.15628063 1.16064395 1.16500728 1.1693706  1.17373392
 1.17809725 1.18246057 1.18682389 1.19118721 1.19555054 1.19991386
 1.20427718 1.20864051 1.21300383 1.21736715 1.22173048 1.2260938
 1.23045712 1.23482045 1.23918377 1.24354709 1.24791042 1.25227374
 1.25663706 1.26100038 1.26536371 1.26972703 1.27409035 1.27845368
 1.282817   1.28718032 1.29154365 1.29590697 1.30027029 1.30463362
 1.30899694 1.31336026 1.31772359 1.32208691 1.32645023 1.33081355
 1.33517688 1.3395402  1.34390352 1.34826685 1.35263017 1.35699349
 1.36135682 1.36572014 1.37008346 1.37444679 1.37881011 1.38317343
 1.38753676 1.39190008 1.3962634  1.40062672 1.40499005 1.40935337
 1.41371669 1.41808002 1.42244334 1.42680666 1.43116999 1.43553331
 1.43989663 1.44425996 1.44862328 1.4529866  1.45734993 1.46171325
 1.46607657 1.47043989 1.47480322 1.47916654 1.48352986 1.48789319
 1.49225651 1.49661983 1.50098316 1.50534648 1.5097098  1.51407313
 1.51843645 1.52279977 1.5271631  1.53152642 1.53588974 1.54025306
 1.54461639 1.54897971 1.55334303 1.55770636 1.56206968 1.566433
 1.57079633 1.57515965 1.57952297 1.5838863  1.58824962 1.59261294
 1.59697627 1.60133959 1.60570291 1.61006623 1.61442956 1.61879288
 1.6231562  1.62751953 1.63188285 1.63624617 1.6406095  1.64497282
 1.64933614 1.65369947 1.65806279 1.66242611 1.66678944 1.67115276
 1.67551608 1.67987941 1.68424273 1.68860605 1.69296937 1.6973327
 1.70169602 1.70605934 1.71042267 1.71478599 1.71914931 1.72351264
 1.72787596 1.73223928 1.73660261 1.74096593 1.74532925 1.74969258
 1.7540559  1.75841922 1.76278254 1.76714587 1.77150919 1.77587251
 1.78023584 1.78459916 1.78896248 1.79332581 1.79768913 1.80205245
 1.80641578 1.8107791  1.81514242 1.81950575 1.82386907 1.82823239
 1.83259571 1.83695904 1.84132236 1.84568568 1.85004901 1.85441233
 1.85877565 1.86313898 1.8675023  1.87186562 1.87622895 1.88059227
 1.88495559 1.88931892 1.89368224 1.89804556 1.90240888 1.90677221
 1.91113553 1.91549885 1.91986218 1.9242255  1.92858882 1.93295215
 1.93731547 1.94167879 1.94604212 1.95040544 1.95476876 1.95913209
 1.96349541 1.96785873 1.97222205 1.97658538 1.9809487  1.98531202
 1.98967535 1.99403867 1.99840199 2.00276532 2.00712864 2.01149196
 2.01585529 2.02021861 2.02458193 2.02894526 2.03330858 2.0376719
 2.04203522 2.04639855 2.05076187 2.05512519 2.05948852 2.06385184
 2.06821516 2.07257849 2.07694181 2.08130513 2.08566846 2.09003178
 2.0943951  2.09875843 2.10312175 2.10748507 2.11184839 2.11621172
 2.12057504 2.12493836 2.12930169 2.13366501 2.13802833 2.14239166
 2.14675498 2.1511183  2.15548163 2.15984495 2.16420827 2.1685716
 2.17293492 2.17729824 2.18166156 2.18602489 2.19038821 2.19475153
 2.19911486 2.20347818 2.2078415  2.21220483 2.21656815 2.22093147
 2.2252948  2.22965812 2.23402144 2.23838477 2.24274809 2.24711141
 2.25147474 2.25583806 2.26020138 2.2645647  2.26892803 2.27329135
 2.27765467 2.282018   2.28638132 2.29074464 2.29510797 2.29947129
 2.30383461 2.30819794 2.31256126 2.31692458 2.32128791 2.32565123
 2.33001455 2.33437787 2.3387412  2.34310452 2.34746784 2.35183117
 2.35619449 2.36055781 2.36492114 2.36928446 2.37364778 2.37801111
 2.38237443 2.38673775 2.39110108 2.3954644  2.39982772 2.40419104
 2.40855437 2.41291769 2.41728101 2.42164434 2.42600766 2.43037098
 2.43473431 2.43909763 2.44346095 2.44782428 2.4521876  2.45655092
 2.46091425 2.46527757 2.46964089 2.47400421 2.47836754 2.48273086
 2.48709418 2.49145751 2.49582083 2.50018415 2.50454748 2.5089108
 2.51327412 2.51763745 2.52200077 2.52636409 2.53072742 2.53509074
 2.53945406 2.54381738 2.54818071 2.55254403 2.55690735 2.56127068
 2.565634   2.56999732 2.57436065 2.57872397 2.58308729 2.58745062
 2.59181394 2.59617726 2.60054059 2.60490391 2.60926723 2.61363055
 2.61799388 2.6223572  2.62672052 2.63108385 2.63544717 2.63981049
 2.64417382 2.64853714 2.65290046 2.65726379 2.66162711 2.66599043
 2.67035376 2.67471708 2.6790804  2.68344372 2.68780705 2.69217037
 2.69653369 2.70089702 2.70526034 2.70962366 2.71398699 2.71835031
 2.72271363 2.72707696 2.73144028 2.7358036  2.74016693 2.74453025
 2.74889357 2.7532569  2.75762022 2.76198354 2.76634686 2.77071019
 2.77507351 2.77943683 2.78380016 2.78816348 2.7925268  2.79689013
 2.80125345 2.80561677 2.8099801  2.81434342 2.81870674 2.82307007
 2.82743339 2.83179671 2.83616003 2.84052336 2.84488668 2.84925
 2.85361333 2.85797665 2.86233997 2.8667033  2.87106662 2.87542994
 2.87979327 2.88415659 2.88851991 2.89288324 2.89724656 2.90160988
 2.9059732  2.91033653 2.91469985 2.91906317 2.9234265  2.92778982
 2.93215314 2.93651647 2.94087979 2.94524311 2.94960644 2.95396976
 2.95833308 2.96269641 2.96705973 2.97142305 2.97578637 2.9801497
 2.98451302 2.98887634 2.99323967 2.99760299 3.00196631 3.00632964
 3.01069296 3.01505628 3.01941961 3.02378293 3.02814625 3.03250958
 3.0368729  3.04123622 3.04559954 3.04996287 3.05432619 3.05868951
 3.06305284 3.06741616 3.07177948 3.07614281 3.08050613 3.08486945
 3.08923278 3.0935961  3.09795942 3.10232275 3.10668607 3.11104939
 3.11541271 3.11977604 3.12413936 3.12850268 3.13286601 3.13722933]
	vol_shape: (224, 592, 592) 	det_shape (224, 600)

new_sinos: (224, 720, 600)

sino: torch.Size([224, 720, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 720, 1200])

fourier_sino:	 torch.Size([224, 720, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 720, 601, 2])
torch.Size([224, 720, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 720, 601, 2])

tmp_filtered:	 torch.Size([224, 720, 1201])

tmp_filtered:	 torch.Size([224, 720, 1201])

filtered:	 torch.Size([224, 720, 600])

recs_noisy: (224, 592, 592)

h
[(0, 1), (1, 1), (2, 0), (3, 2), (4, 1), (5, 1), (6, 0), (7, 0), (8, 0), (9, 1), (10, 5), (11, 9), (12, 16), (13, 24), (14, 111), (15, 347), (16, 1439), (17, 5111), (18, 17320), (19, 55583), (20, 160062), (21, 421210), (22, 967091), (23, 30462750), (24, 3124946), (25, 4352493), (26, 5281613), (27, 5904818), (28, 6325035), (29, 6376804), (30, 5706006), (31, 4323434), (32, 2700881), (33, 1393136), (34, 600365), (35, 221585), (36, 71476), (37, 20902), (38, 5895), (39, 1653), (40, 526), (41, 214), (42, 140), (43, 120), (44, 87), (45, 68), (46, 73), (47, 49), (48, 41), (49, 37), (50, 35), (51, 30), (52, 31), (53, 30), (54, 23), (55, 21), (56, 17), (57, 24), (58, 11), (59, 17), (60, 11), (61, 16), (62, 12), (63, 12), (64, 8), (65, 6), (66, 11), (67, 13), (68, 8), (69, 9), (70, 9), (71, 5), (72, 9), (73, 5), (74, 4), (75, 6), (76, 8), (77, 4), (78, 5), (79, 4), (80, 5), (81, 1), (82, 2), (83, 4), (84, 2), (85, 2), (86, 5), (87, 2), (88, 2), (89, 4), (90, 4), (91, 2), (92, 0), (93, 4), (94, 1), (95, 1), (96, 3), (97, 2), (98, 1), (99, 3)]

min_intense = -986.43e-4, max_intense = 3175.20e-4

h
[(0, 1), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0), (34, 0), (35, 2), (36, 0), (37, 0), (38, 0), (39, 0), (40, 0), (41, 1), (42, 0), (43, 0), (44, 0), (45, 0), (46, 0), (47, 0), (48, 0), (49, 0), (50, 0), (51, 0), (52, 0), (53, 0), (54, 0), (55, 0), (56, 0), (57, 0), (58, 0), (59, 1), (60, 0), (61, 0), (62, 0), (63, 0), (64, 0), (65, 0), (66, 0), (67, 0), (68, 0), (69, 0), (70, 0), (71, 0), (72, 0), (73, 0), (74, 0), (75, 0), (76, 0), (77, 0), (78, 0), (79, 0), (80, 0), (81, 0), (82, 0), (83, 0), (84, 0), (85, 0), (86, 0), (87, 0), (88, 0), (89, 0), (90, 0), (91, 0), (92, 1), (93, 0), (94, 0), (95, 0), (96, 0), (97, 0), (98, 0), (99, 0), (100, 0), (101, 1), (102, 2), (103, 0), (104, 1), (105, 0), (106, 0), (107, 0), (108, 0), (109, 1), (110, 1), (111, 1), (112, 2), (113, 1), (114, 0), (115, 0), (116, 1), (117, 0), (118, 2), (119, 1), (120, 0), (121, 2), (122, 1), (123, 0), (124, 0), (125, 1), (126, 2), (127, 1), (128, 5), (129, 4), (130, 1), (131, 2), (132, 0), (133, 3), (134, 1), (135, 3), (136, 4), (137, 5), (138, 1), (139, 4), (140, 6), (141, 6), (142, 1), (143, 10), (144, 15), (145, 15), (146, 13), (147, 12), (148, 15), (149, 18), (150, 25), (151, 18), (152, 28), (153, 27), (154, 19), (155, 30), (156, 39), (157, 48), (158, 56), (159, 57), (160, 63), (161, 68), (162, 84), (163, 116), (164, 115), (165, 158), (166, 171), (167, 192), (168, 225), (169, 247), (170, 255), (171, 323), (172, 305), (173, 402), (174, 481), (175, 498), (176, 601), (177, 651), (178, 758), (179, 837), (180, 975), (181, 1042), (182, 1196), (183, 1334), (184, 1578), (185, 1767), (186, 1934), (187, 2241), (188, 2469), (189, 2784), (190, 3080), (191, 3513), (192, 3972), (193, 4463), (194, 5054), (195, 5673), (196, 6322), (197, 6931), (198, 7796), (199, 8779), (200, 9533), (201, 10672), (202, 11929), (203, 13012), (204, 14733), (205, 16150), (206, 17910), (207, 20002), (208, 22034), (209, 24087), (210, 26587), (211, 29583), (212, 32345), (213, 35379), (214, 39605), (215, 42728), (216, 46670), (217, 51581), (218, 55858), (219, 60874), (220, 65972), (221, 71902), (222, 77929), (223, 84520), (224, 91167), (225, 98594), (226, 106062), (227, 114666), (228, 123742), (229, 132537), (230, 141045), (231, 151016), (232, 160822), (233, 171566), (234, 182977), (235, 194006), (236, 206270), (237, 28783978), (238, 229643), (239, 241427), (240, 254164), (241, 267653), (242, 279018), (243, 293416), (244, 306531), (245, 319845), (246, 331896), (247, 343654), (248, 358073), (249, 370696), (250, 382097), (251, 396440), (252, 408698), (253, 420100), (254, 430845), (255, 440749), (256, 452300), (257, 464290), (258, 472781), (259, 484193), (260, 491441), (261, 501366), (262, 509899), (263, 517857), (264, 526359), (265, 533278), (266, 540574), (267, 547230), (268, 553346), (269, 560263), (270, 565567), (271, 572433), (272, 578354), (273, 583062), (274, 588528), (275, 593147), (276, 598882), (277, 604560), (278, 607392), (279, 612893), (280, 617053), (281, 619215), (282, 627205), (283, 629744), (284, 632142), (285, 636291), (286, 637405), (287, 639612), (288, 642598), (289, 643770), (290, 644587), (291, 646590), (292, 644203), (293, 644726), (294, 641532), (295, 639835), (296, 635745), (297, 630857), (298, 627961), (299, 620768), (300, 615082), (301, 606468), (302, 597815), (303, 588742), (304, 578169), (305, 568252), (306, 557030), (307, 544394), (308, 531966), (309, 518088), (310, 502923), (311, 488767), (312, 474057), (313, 457400), (314, 442134), (315, 425089), (316, 408223), (317, 391447), (318, 375340), (319, 358054), (320, 340552), (321, 325424), (322, 307950), (323, 292054), (324, 276988), (325, 260549), (326, 245625), (327, 231958), (328, 216477), (329, 203304), (330, 190010), (331, 177156), (332, 164535), (333, 152972), (334, 142332), (335, 131449), (336, 121872), (337, 112846), (338, 104062), (339, 95902), (340, 87317), (341, 80635), (342, 73762), (343, 66730), (344, 61074), (345, 55244), (346, 50626), (347, 45991), (348, 41417), (349, 37569), (350, 34058), (351, 30966), (352, 27642), (353, 25044), (354, 22596), (355, 19977), (356, 18042), (357, 16231), (358, 14270), (359, 12759), (360, 11372), (361, 10257), (362, 9189), (363, 8022), (364, 7158), (365, 6513), (366, 5516), (367, 5045), (368, 4486), (369, 3918), (370, 3423), (371, 2993), (372, 2690), (373, 2363), (374, 2119), (375, 1838), (376, 1681), (377, 1433), (378, 1248), (379, 1114), (380, 1019), (381, 899), (382, 729), (383, 638), (384, 584), (385, 503), (386, 458), (387, 391), (388, 357), (389, 317), (390, 261), (391, 260), (392, 193), (393, 184), (394, 162), (395, 150), (396, 128), (397, 136), (398, 90), (399, 89), (400, 78), (401, 76), (402, 62), (403, 53), (404, 49), (405, 52), (406, 55), (407, 32), (408, 30), (409, 39), (410, 26), (411, 24), (412, 23), (413, 27), (414, 23), (415, 29), (416, 16), (417, 13), (418, 18), (419, 15), (420, 16), (421, 20), (422, 12), (423, 18), (424, 14), (425, 14), (426, 14), (427, 10), (428, 11), (429, 11), (430, 14), (431, 11), (432, 14), (433, 14), (434, 7), (435, 18), (436, 10), (437, 7), (438, 14), (439, 11), (440, 15), (441, 9), (442, 8), (443, 6), (444, 4), (445, 10), (446, 4), (447, 13), (448, 9), (449, 9), (450, 5), (451, 6), (452, 4), (453, 4), (454, 8), (455, 9), (456, 7), (457, 9), (458, 8), (459, 8), (460, 4), (461, 9), (462, 5), (463, 10), (464, 6), (465, 8), (466, 12), (467, 6), (468, 8), (469, 5), (470, 5), (471, 8), (472, 2), (473, 4), (474, 4), (475, 2), (476, 7), (477, 7), (478, 4), (479, 6), (480, 1), (481, 6), (482, 5), (483, 2), (484, 5), (485, 3), (486, 6), (487, 3), (488, 5), (489, 5), (490, 6), (491, 3), (492, 4), (493, 2), (494, 4), (495, 6), (496, 1), (497, 4), (498, 6), (499, 1), (500, 3), (501, 2), (502, 4), (503, 2), (504, 2), (505, 4), (506, 5), (507, 4), (508, 4), (509, 5), (510, 1), (511, 6), (512, 5), (513, 3), (514, 2), (515, 2), (516, 3), (517, 3), (518, 2), (519, 3), (520, 5), (521, 7), (522, 2), (523, 2), (524, 3), (525, 1), (526, 5), (527, 1), (528, 0), (529, 5), (530, 3), (531, 1), (532, 5), (533, 3), (534, 2), (535, 2), (536, 4), (537, 2), (538, 2), (539, 6), (540, 4), (541, 5), (542, 3), (543, 0), (544, 0), (545, 3), (546, 2), (547, 3), (548, 1), (549, 2), (550, 0), (551, 4), (552, 1), (553, 3), (554, 1), (555, 4), (556, 2), (557, 1), (558, 3), (559, 2), (560, 3), (561, 2), (562, 3), (563, 2), (564, 2), (565, 1), (566, 0), (567, 1), (568, 1), (569, 2), (570, 3), (571, 6), (572, 2), (573, 1), (574, 1), (575, 2), (576, 2), (577, 6), (578, 1), (579, 0), (580, 1), (581, 2), (582, 1), (583, 0), (584, 2), (585, 0), (586, 0), (587, 1), (588, 4), (589, 0), (590, 2), (591, 0), (592, 1), (593, 2), (594, 1), (595, 2), (596, 3), (597, 1), (598, 3), (599, 2), (600, 3), (601, 2), (602, 1), (603, 2), (604, 1), (605, 1), (606, 0), (607, 1), (608, 0), (609, 0), (610, 1), (611, 2), (612, 3), (613, 0), (614, 1), (615, 2), (616, 2), (617, 2), (618, 1), (619, 2), (620, 0), (621, 0), (622, 2), (623, 2), (624, 1), (625, 0), (626, 0), (627, 2), (628, 3), (629, 2), (630, 1), (631, 1), (632, 0), (633, 1), (634, 2), (635, 2), (636, 4), (637, 0), (638, 0), (639, 1), (640, 1), (641, 0), (642, 0), (643, 2), (644, 1), (645, 0), (646, 1), (647, 2), (648, 0), (649, 1), (650, 0), (651, 1), (652, 2), (653, 1), (654, 0), (655, 0), (656, 2), (657, 0), (658, 0), (659, 0), (660, 0), (661, 0), (662, 3), (663, 1), (664, 1), (665, 1), (666, 1), (667, 1), (668, 0), (669, 3), (670, 1), (671, 1), (672, 1), (673, 0), (674, 3), (675, 3), (676, 2), (677, 1), (678, 1), (679, 0), (680, 0), (681, 0), (682, 0), (683, 1), (684, 1), (685, 0), (686, 3), (687, 1), (688, 2), (689, 0), (690, 1), (691, 4), (692, 0), (693, 1), (694, 0), (695, 0), (696, 1), (697, 0), (698, 2), (699, 0), (700, 1), (701, 0), (702, 1), (703, 3), (704, 0), (705, 3), (706, 0), (707, 1), (708, 0), (709, 0), (710, 1), (711, 0), (712, 1), (713, 1), (714, 0), (715, 0), (716, 0), (717, 1), (718, 1), (719, 0), (720, 1), (721, 0), (722, 1), (723, 2), (724, 1), (725, 0), (726, 2), (727, 1), (728, 0), (729, 1), (730, 0), (731, 0), (732, 0), (733, 1), (734, 1), (735, 2), (736, 1), (737, 0), (738, 0), (739, 0), (740, 0), (741, 0), (742, 0), (743, 0), (744, 0), (745, 1), (746, 0), (747, 0), (748, 3), (749, 0), (750, 2), (751, 0), (752, 1), (753, 0), (754, 0), (755, 0), (756, 1), (757, 0), (758, 1), (759, 1), (760, 0), (761, 0), (762, 1), (763, 2), (764, 0), (765, 0), (766, 0), (767, 3), (768, 0), (769, 2), (770, 0), (771, 0), (772, 0), (773, 1), (774, 1), (775, 0), (776, 0), (777, 1), (778, 1), (779, 0), (780, 0), (781, 1), (782, 1), (783, 0), (784, 0), (785, 0), (786, 2), (787, 0), (788, 0), (789, 1), (790, 0), (791, 1), (792, 1), (793, 0), (794, 0), (795, 0), (796, 0), (797, 1), (798, 1), (799, 0), (800, 1), (801, 2), (802, 0), (803, 0), (804, 1), (805, 0), (806, 0), (807, 0), (808, 1), (809, 0), (810, 0), (811, 0), (812, 0), (813, 0), (814, 1), (815, 0), (816, 0), (817, 0), (818, 0), (819, 0), (820, 0), (821, 1), (822, 1), (823, 0), (824, 0), (825, 0), (826, 0), (827, 0), (828, 0), (829, 0), (830, 0), (831, 0), (832, 0), (833, 1), (834, 2), (835, 1), (836, 0), (837, 0), (838, 0), (839, 0), (840, 0), (841, 1), (842, 0), (843, 0), (844, 1), (845, 0), (846, 0), (847, 0), (848, 0), (849, 0), (850, 1), (851, 1), (852, 0), (853, 0), (854, 0), (855, 0), (856, 0), (857, 0), (858, 0), (859, 0), (860, 0), (861, 0), (862, 0), (863, 1), (864, 1), (865, 0), (866, 0), (867, 1), (868, 1), (869, 1), (870, 0), (871, 0), (872, 0), (873, 0), (874, 0), (875, 1), (876, 0), (877, 1), (878, 0), (879, 0), (880, 0), (881, 0), (882, 0), (883, 0), (884, 0), (885, 0), (886, 0), (887, 0), (888, 0), (889, 2), (890, 0), (891, 0), (892, 2), (893, 0), (894, 0), (895, 1), (896, 0), (897, 0), (898, 0), (899, 1), (900, 1), (901, 0), (902, 0), (903, 1), (904, 0), (905, 0), (906, 2), (907, 0), (908, 0), (909, 0), (910, 0), (911, 0), (912, 0), (913, 0), (914, 0), (915, 0), (916, 1), (917, 1), (918, 0), (919, 0), (920, 0), (921, 0), (922, 0), (923, 0), (924, 0), (925, 0), (926, 0), (927, 0), (928, 0), (929, 0), (930, 0), (931, 2), (932, 0), (933, 0), (934, 1), (935, 1), (936, 0), (937, 0), (938, 0), (939, 0), (940, 0), (941, 0), (942, 0), (943, 0), (944, 0), (945, 0), (946, 0), (947, 0), (948, 0), (949, 1), (950, 0), (951, 0), (952, 0), (953, 0), (954, 0), (955, 0), (956, 0), (957, 1), (958, 0), (959, 0), (960, 0), (961, 1), (962, 0), (963, 0), (964, 0), (965, 1), (966, 1), (967, 0), (968, 0), (969, 0), (970, 0), (971, 1), (972, 0), (973, 0), (974, 0), (975, 0), (976, 0), (977, 0), (978, 1), (979, 0), (980, 0), (981, 0), (982, 0), (983, 0), (984, 0), (985, 0), (986, 1), (987, 0), (988, 0), (989, 0), (990, 0), (991, 0), (992, 0), (993, 0), (994, 1), (995, 0), (996, 1), (997, 0), (998, 0), (999, 1)]

k = 0.01

np.max(h) = 28783978 np.max(h) * k = 287839.78
237 323

min_intense = -0.13e-4, max_intense = 361.94e-4

h
[(0, 28783978), (1, 229643), (2, 241427), (3, 254164), (4, 267653), (5, 279018), (6, 293416), (7, 306531), (8, 319845), (9, 331896), (10, 343654), (11, 358073), (12, 370696), (13, 382097), (14, 396440), (15, 408698), (16, 420100), (17, 430845), (18, 440749), (19, 452300), (20, 464290), (21, 472781), (22, 484193), (23, 491441), (24, 501366), (25, 509899), (26, 517857), (27, 526359), (28, 533278), (29, 540574), (30, 547230), (31, 553346), (32, 560263), (33, 565567), (34, 572433), (35, 578354), (36, 583062), (37, 588528), (38, 593147), (39, 598882), (40, 604560), (41, 607392), (42, 612893), (43, 617053), (44, 619215), (45, 627205), (46, 629744), (47, 632142), (48, 636291), (49, 637405), (50, 639612), (51, 642598), (52, 643770), (53, 644587), (54, 646590), (55, 644203), (56, 644726), (57, 641532), (58, 639835), (59, 635745), (60, 630857), (61, 627961), (62, 620768), (63, 615082), (64, 606468), (65, 597815), (66, 588742), (67, 578169), (68, 568252), (69, 557030), (70, 544394), (71, 531966), (72, 518088), (73, 502923), (74, 488767), (75, 474057), (76, 457400), (77, 442134), (78, 425089), (79, 408223), (80, 391447), (81, 375340), (82, 358054), (83, 340552), (84, 325424), (85, 307950), (86, 292054)]

min_intense = -0.13e-4, max_intense = 357.77e-4
diap_name: (-0.13e-4, 361.94e-4) <class 'str'>

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)

sinos_split: (224, 45, 600)

sino: torch.Size([224, 45, 600])
num_padding_left: 300 	num_padding: 600

M:	 1200

tmp_sino:	 torch.Size([224, 45, 1200])

fourier_sino:	 torch.Size([224, 45, 601, 2])

real_filter:	 (1200,)

fourier_filter:	 torch.Size([601, 2])

fourier_sino:	 torch.Size([224, 45, 601, 2])
torch.Size([224, 45, 601]) 	*	 torch.Size([601])

new_fourier_sino:	 torch.Size([224, 45, 601, 2])

tmp_filtered:	 torch.Size([224, 45, 1201])

tmp_filtered:	 torch.Size([224, 45, 1201])

filtered:	 torch.Size([224, 45, 600])

recs_noisy_split: (224, 592, 592)
noisy_sub0_1_2_3_4_5_6_7_8_9_10_11_12_13_14_15_norm=1_diap=(-0.13e-4, 361.94e-4).png
